package jmb26_wmj1.chatapp.client.view;


import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.GridLayout;
import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JToggleButton;

import common.IChatRoomConnector;
import jmb26_wmj1.chatapp.chatroom.view.ChatRoomView;
import jmb26_wmj1.chatapp.client.model.IComponentFactory;
import jmb26_wmj1.chatapp.client.view.IView2ModelAdapter;
import provided.discovery.IEndPointData;
import provided.discovery.impl.view.DiscoveryPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.JTextArea;
import javax.swing.JComboBox;
import javax.swing.JTabbedPane;
import java.awt.event.ActionListener;
import java.rmi.RemoteException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.awt.event.ActionEvent;
import javax.swing.BoxLayout;
import java.awt.FlowLayout;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.CardLayout;
import javax.swing.JSplitPane;

public class ClientView<TDropDown1, TDropDown2> extends JFrame {
	//TDropDown1 is host, TDropDown2 is room
	
	//////////////////////////////////////
	// set of rooms connected to 
	private Set<TDropDown2> rooms = new HashSet<>();
	
	// set of users connected to 
	private Set<TDropDown1> users = new HashSet<>(); 
	
	
	
	/**
	 * Adapter to Model
	 */
	private IView2ModelAdapter<TDropDown1, TDropDown2> view2ModelAdpt;
	private final JPanel controlPanel = new JPanel();
	private final JPanel panel_1 = new JPanel();
	private final JLabel appStartUpLabel = new JLabel("App Startup");
	private final JLabel usernameLabel = new JLabel("Username:");
	private final JTextField usernameInput = new JTextField();
	private final JLabel serverNameLabel = new JLabel("Server name:");
	private final JTextField serverNameInput = new JTextField();
	private final JButton startButton = new JButton("START! ");
	private final JButton exitButton = new JButton("EXIT ALL AND QUIT");
	private final JPanel panel_2 = new JPanel();
	private final JLabel makeChatRoomLabel = new JLabel("Make Chat Room");
	private final JTextField chatRoomNameInput = new JTextField();
	private final JButton makeChatRoomButton = new JButton("Make it! ");
	private final JPanel panel_3 = new JPanel();
	private final JLabel remoteHostLabel = new JLabel("Remote Hosts");
	private final JPanel discoveryPanel = new JPanel();
	private final JPanel leftDiscoveryPanel = new JPanel();
	private final JLabel discoveryServerLabel = new JLabel("Discovery Server");
	private final JLabel categoryLabel = new JLabel("Category");
	private final JTextField categoryInput = new JTextField();
	private final JCheckBox watchOnlyCheckBox = new JCheckBox("Watch Only");
	private final JButton connectButton = new JButton("Connect");
	private final JPanel rightDiscoveryPanel = new JPanel();
	private final JLabel registeredEndpointsLabel = new JLabel("Registered EndPoints");
	private final JPanel panel3 = new JPanel();
	private final JPanel outputPanel = new JPanel();
	private final JPanel sendPanel = new JPanel();
	private final JTextField messageInputTextArea = new JTextField();
	private final JButton sendTextButton = new JButton("Send Text");
	private final JButton btnSendFile = new JButton("New button");
	private final JButton btnSendComponent = new JButton("New button");
	private final JPanel panel_4 = new JPanel();
	private final JPanel manualConnectPanel = new JPanel();
	private final JLabel lblNewLabel = new JLabel("Connect To Manually");
	private final JTextField manualConnectTextField = new JTextField();
	private final JButton manualConnectButton = new JButton("Connect!");
	private final JPanel hostPanel = new JPanel();
	private final JLabel connectedHostsLabel = new JLabel("Connected Hosts");
	
	private final JComboBox<TDropDown1> hostComboBox = new JComboBox<TDropDown1>();
	private final JPanel connectButtonsPanel = new JPanel();
	private final JButton connectInviteButton = new JButton("Invite");
	private final JButton connectRequestButton = new JButton("Request");
	private final JButton connectJoinButton = new JButton("Join");
	//private final JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
	private final JTabbedPane tabbedPane = new JTabbedPane();
	private final JComponent testComponent = new JPanel();
	private final JComponent testComponent2 = new JPanel();
	private JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
            controlPanel, outputPanel);
	private final JPanel roomDropdownPanel = new JPanel();
	private final JComboBox<TDropDown2> roomsComboBox = new JComboBox<TDropDown2>();
	private final JLabel lblAvailableChatrooms = new JLabel("Available Chatrooms");
	private final JPanel consolePanel = new JPanel();
	private final JScrollPane consoleScrollPane = new JScrollPane();
	private final JTextArea consoleArea = new JTextArea();
	
	
	
	    
	
	
	public ClientView(IView2ModelAdapter<TDropDown1, TDropDown2> iView2ModelAdapter) {
		manualConnectTextField.setToolTipText("Enter IP address for manual connect");
		manualConnectTextField.setColumns(10);
		messageInputTextArea.setColumns(10);
		// TODO Auto-generated constructor stub
		this.view2ModelAdpt = iView2ModelAdapter;
		categoryInput.setToolTipText("Enter category here ");
		categoryInput.setColumns(10);
		chatRoomNameInput.setToolTipText("Enter chatroom name for creation here ");
		chatRoomNameInput.setColumns(10);
		serverNameInput.setToolTipText("Enter server name here ");
		serverNameInput.setColumns(10);
		usernameInput.setToolTipText("Set Username Here");
		usernameInput.setColumns(10);
		initGUI();
	}
	private void initGUI() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1000, 1700);
		controlPanel.setToolTipText("Control Panel for ChatApp");
		
		//getContentPane().add(controlPanel, BorderLayout.NORTH);
		controlPanel.setLayout(new BoxLayout(controlPanel, BoxLayout.X_AXIS));
		panel_1.setToolTipText("Contains App Startup Components");
		
		controlPanel.add(panel_1);
		panel_1.setLayout(new GridLayout(7, 0, 0, 0));
		appStartUpLabel.setToolTipText("App Startup Label");
		
		panel_1.add(appStartUpLabel);
		usernameLabel.setToolTipText("Username Label");
		usernameLabel.setFont(new Font("Lucida Grande", Font.PLAIN, 8));
		
		panel_1.add(usernameLabel);
		
		panel_1.add(usernameInput);
		serverNameLabel.setToolTipText("Server Name label");
		serverNameLabel.setFont(new Font("Lucida Grande", Font.PLAIN, 8));
		
		panel_1.add(serverNameLabel);
		
		panel_1.add(serverNameInput);
		startButton.setToolTipText("Click to start the app!");
		
		panel_1.add(startButton);
		exitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// Stop and Exit RMI 
				view2ModelAdpt.quit();
				
			}
		});
		exitButton.setToolTipText("Click to exit and close ChatApp");
		
		panel_1.add(exitButton);
		panel_2.setToolTipText("Panel for making ChatRoom");
		
		controlPanel.add(panel_2);
		panel_2.setLayout(new GridLayout(3, 0, 0, 0));
		makeChatRoomLabel.setToolTipText("Make ChatRoom Label");
		
		panel_2.add(makeChatRoomLabel);
		
		panel_2.add(chatRoomNameInput);
		makeChatRoomButton.setToolTipText("Click to make ChatRoom! ");
		makeChatRoomButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//view2ModelAdpt.makeRoom(chatRoomNameInput.getText());
				TDropDown2 newRoom = view2ModelAdpt.createRoom(chatRoomNameInput.getText());
				
				roomsComboBox.addItem(newRoom);
			}
		});
		
		panel_2.add(makeChatRoomButton);
		panel3.setToolTipText("panel encapsulating discovery panel");
		
		controlPanel.add(panel3);
		panel_4.setToolTipText("panel for holding additional connection panels");
		
		controlPanel.add(panel_4);
		panel_4.setLayout(new GridLayout(4, 0, 0, 0));
		manualConnectPanel.setToolTipText("Manual connect to panel");
		
		panel_4.add(manualConnectPanel);
		manualConnectPanel.setLayout(new GridLayout(3, 0, 0, 0));
		lblNewLabel.setToolTipText("Connect to manually label");
		lblNewLabel.setFont(new Font("Lucida Grande", Font.PLAIN, 8));
		
		manualConnectPanel.add(lblNewLabel);
		
		manualConnectPanel.add(manualConnectTextField);
		manualConnectButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				TDropDown1 userStub;
				
				try {
					userStub = view2ModelAdpt.connectUser(manualConnectTextField.getText());
					
					hostComboBox.addItem(userStub);
					users.add(userStub); 
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				
			}
		});
		manualConnectButton.setToolTipText("manual connect button");
		
		manualConnectPanel.add(manualConnectButton);
		hostPanel.setToolTipText("Panel that holds host info");
		
		panel_4.add(hostPanel);
		hostPanel.setLayout(new GridLayout(2, 0, 0, 0));
		connectedHostsLabel.setToolTipText("Connected Hosts Label");
		connectedHostsLabel.setFont(new Font("Lucida Grande", Font.PLAIN, 8));
		
		hostPanel.add(connectedHostsLabel);
		hostComboBox.setToolTipText("Connected Hosts Box");
		
		hostPanel.add(hostComboBox);
		
		hostComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				List<TDropDown2> otherRooms;
				
				
				
				
				try {
					
					otherRooms = view2ModelAdpt.getSelectedUserRooms((TDropDown1) hostComboBox.getSelectedItem());
					// add other user to the drop list 1 
					
					// clear the rooms of other person previous 
					roomsComboBox.removeAllItems(); 
					
					// add them in to menu 
					for (TDropDown2 room : otherRooms) {
						roomsComboBox.addItem(room);
					}
					
					
					
					
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				
			}
		});
		
		
		
		connectButtonsPanel.setToolTipText("Panel that holds buttons for connecting");
		panel_4.add(roomDropdownPanel);
		roomDropdownPanel.setLayout(new GridLayout(2, 0, 0, 0));
		panel_4.add(connectButtonsPanel);
		connectButtonsPanel.setLayout(new GridLayout(0, 3, 0, 0));
		connectInviteButton.setToolTipText("Invite to chatrooms");
		connectButtonsPanel.add(connectJoinButton);
		
		connectInviteButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//view2ModelAdpt.invite2Room(chatRoomNameInput.getText());
				view2ModelAdpt.inviteUser(hostComboBox.getItemAt(hostComboBox.getSelectedIndex()), roomsComboBox.getItemAt(roomsComboBox.getSelectedIndex()));
			}
		});
		
		connectButtonsPanel.add(connectInviteButton);
		connectRequestButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				//view2ModelAdpt.request(hostComboBox.getItemAt(hostComboBox.getSelectedIndex()));
				
				try {
					view2ModelAdpt.getSelectedUserRooms(hostComboBox.getItemAt(hostComboBox.getSelectedIndex()));
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		connectRequestButton.setToolTipText("Request chat rooms");
		connectRequestButton.setFont(new Font("Lucida Grande", Font.PLAIN, 13));
		
		connectButtonsPanel.add(connectRequestButton);
		connectJoinButton.setToolTipText("Join selected chat room");
		
		connectButtonsPanel.add(connectJoinButton);
		roomDropdownPanel.setToolTipText("a panel containing rooms to connect to");
		
		
		
		roomsComboBox.setToolTipText("dropdown populating with the rooms of all connections");
		roomDropdownPanel.add(lblAvailableChatrooms);
		roomDropdownPanel.add(roomsComboBox);
		lblAvailableChatrooms.setToolTipText("label for available rooms");
		
		
		connectJoinButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//view2ModelAdpt.joinRoom(chatRoomNameInput.getText());
				
				try {
					view2ModelAdpt.joinRoom(roomsComboBox.getItemAt(roomsComboBox.getSelectedIndex()));
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
			}
		});
		
		
		
		
		
		outputPanel.setToolTipText("panel containing all outputs from chatapp");

		
		//getContentPane().add(outputPanel, BorderLayout.SOUTH);
		outputPanel.setLayout(new GridLayout(2, 0, 0, 0));
		//messagePanel.setToolTipText("panel containing information about message exchange");
		
		//outputPanel.add(messagePanel);
		//messagePanel.setLayout(new GridLayout(1, 0, 0, 0));
		
		outputPanel.add(tabbedPane);
		
		outputPanel.add(sendPanel);
		sendPanel.setLayout(new GridLayout(2, 4, 0, 0));
		
		sendPanel.add(messageInputTextArea);
		sendTextButton.setToolTipText("button to send text");
		sendTextButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//identify room by its id name, in which case room names should be kept in an additional dict maybe
				String selectedRoom = tabbedPane.getTitleAt(tabbedPane.getSelectedIndex());
				//identify room by its location in internal rooms records
				//Integer selectedRoom = tabbedPane.getSelectedIndex();
				
				//////////////////////////////////////////////////////////////
				view2ModelAdpt.updateRoomView(selectedRoom, messageInputTextArea.getText());
			}
		});
		
		sendPanel.add(sendTextButton);
		btnSendFile.setToolTipText("button for sending file");
		
		sendPanel.add(btnSendFile);
		btnSendComponent.setToolTipText("Button for sending component");
		
		sendPanel.add(btnSendComponent);
		tabbedPane.setToolTipText("Tabbed pane to hold chatrooms ");
		tabbedPane.addTab("Console", null, consolePanel);
		
		
		 
		consolePanel.setLayout(new GridLayout(1, 0, 0, 0));
		consoleScrollPane.setToolTipText("scrollpane containing message exchanges");
		
		consolePanel.add(consoleScrollPane);
		consoleArea.setToolTipText("text area containing message exchanges");
		
		
		consoleScrollPane.setViewportView(consoleArea);
		consoleArea.append("Welcome to chat! \n");
		
		
		
		getContentPane().add(splitPane, BorderLayout.SOUTH);
		
		getContentPane().add(splitPane, BorderLayout.WEST);
		
		getContentPane().add(splitPane, BorderLayout.WEST);
	}
	public void accept(String s) {
		// TODO Auto-generated method stub
		consoleArea.append(s + '\n');
		
		
	}
	/**
	 * After connecting to someone in the discovery server, add their stub to hosts dropdown
	 * @param host
	 */
	public void populateHosts(TDropDown1 host) {
		TDropDown1 o = host;
		if (null == o)
			return;

		hostComboBox.insertItemAt(o, 0);
	
		
	}
	/**
	 * 
	 * @param rooms
	 */
	public void populateRoom(TDropDown2 rooms) {
		TDropDown2 o = rooms;
		if (null == o)
			return;

		roomsComboBox.insertItemAt(o, 0);
			
	}
	/**
	 * Add the given component (here a discovery server) to the control panel,  then revalidating and packing the frame.
	 * @param comp The component to add
	 */
	public void addCtrlComponent(JComponent comp) {
		panel3.add(comp);  // Add the component to the control panel
		validate();  // re-runs the frame's layout manager to account for the newly added component 
		pack(); // resizes the frame and panels to make sure the newly added component is visible.  Note that this may adversely affect empty text displays without a preferred size setting.
	}
	

	public void installMiniView(String chatRoomName, JPanel miniView) {
		tabbedPane.addTab(chatRoomName, miniView);
	
		
	}
	
	
	public void addNewRooms(List<IChatRoomConnector> friendsRooms) {
		// TODO Auto-generated method stub
		
	}
	
	
	/////////////////////////////////////////////////////////////////////
	
	public void removeAllMiniViews() {
		tabbedPane.removeAll(); 
	}
	
	
	public void removeMiniView(TDropDown2 room) {
		tabbedPane.removeTabAt(tabbedPane.getSelectedIndex());
	}
	
	public void addUser(TDropDown1 user) {
		hostComboBox.addItem(user); 
	}
	
	
	public void addRoom(TDropDown2 room) {
		roomsComboBox.addItem(room);
		rooms.add(room); 
	}
	
	
	public void removeRoomFromList(TDropDown2 room) {
		roomsComboBox.removeItem(room);
		rooms.remove(room);
	}
	
//	/**
//	 * Updates the view and contents of a specified chatroom upon call from mini mvc
//	 * ...should this take as input a string for the panel name instead of the panel itself?
//	 */
//	public void updateChatView(JPanel panel, Message contents) {
//		//in case where contents is a string
//		messagePanel.add(new JLabel(contents));
//	}
	
	
//	public void start() {
//		// TODO Auto-generated method stub
//		this.setVisible(true);
//	}
	
	public void start() {
		// TODO Auto-generated method stub
		setVisible(true);
	}
	
	public void stop() {
		setVisible(false); 
	}
	
	/**
	 * Launch the application.
	 * @param args the args to be executed
	 */
	/*public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ClientView frame = new ClientView(view2ModelAdpt);
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}*/
	
	
	
	
	
	
	

}
