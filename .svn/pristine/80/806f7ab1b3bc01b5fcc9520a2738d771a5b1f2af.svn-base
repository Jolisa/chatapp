<!DOCTYPE HTML>
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (14.0.2) on Fri Nov 06 14:01:10 EST 2020 -->
<title>AObjectLoader</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="dc.created" content="2020-11-06">
<meta name="description" content="declaration: module: HW08, package: provided.util.loader.impl, class: AObjectLoader">
<meta name="generator" content="javadoc/ClassWriterImpl">
<link rel="stylesheet" type="text/css" href="../../../../../stylesheet.css" title="Style">
<link rel="stylesheet" type="text/css" href="../../../../../script-dir/jquery-ui.css" title="Style">
<script type="text/javascript" src="../../../../../script.js"></script>
<script type="text/javascript" src="../../../../../script-dir/jszip/dist/jszip.min.js"></script>
<script type="text/javascript" src="../../../../../script-dir/jszip-utils/dist/jszip-utils.min.js"></script>
<!--[if IE]>
<script type="text/javascript" src="../../../../../script-dir/jszip-utils/dist/jszip-utils-ie.min.js"></script>
<![endif]-->
<script type="text/javascript" src="../../../../../script-dir/jquery-3.4.1.js"></script>
<script type="text/javascript" src="../../../../../script-dir/jquery-ui.js"></script>
</head>
<body class="class-declaration">
<script type="text/javascript">var data = {"i0":10,"i1":6,"i2":10,"i3":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
var pathtoroot = "../../../../../";
loadScripts(document, 'script');</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<div class="flexBox">
<header role="banner" class="flexHeader">
<nav role="navigation">
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a id="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../module-summary.html">Module</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/AObjectLoader.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<div class="navListSearch"><label for="search">SEARCH:</label>
<input type="text" id="search" value="search" disabled="disabled">
<input type="reset" id="reset" value="reset" disabled="disabled">
</div>
</div>
<!-- ========= END OF TOP NAVBAR ========= -->
<div class="skipNav"><a id="skip.navbar.top">
<!--   -->
</a></div>
</nav>
</header>
<div class="flexContent">
<main role="main">
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle"><span class="moduleLabelInType">Module</span>&nbsp;<a href="../../../../module-summary.html">HW08</a></div>
<div class="subTitle"><span class="packageLabelInType">Package</span>&nbsp;<a href="package-summary.html">provided.util.loader.impl</a></div>
<h1 title="Class AObjectLoader" class="title">Class AObjectLoader&lt;ReturnT&gt;</h1>
</div>
<div class="contentContainer">
<div class="inheritance" title="Inheritance Tree">java.lang.Object
<div class="inheritance">provided.util.loader.impl.AObjectLoader&lt;ReturnT&gt;</div>
</div>
<section class="description">
<dl>
<dt><span class="paramLabel">Type Parameters:</span></dt>
<dd><code>ReturnT</code> - The type of object to be created.</dd>
</dl>
<dl>
<dt>All Implemented Interfaces:</dt>
<dd><code><a href="../IObjectLoader.html" title="interface in provided.util.loader">IObjectLoader</a>&lt;ReturnT&gt;</code></dd>
</dl>
<dl>
<dt>Direct Known Subclasses:</dt>
<dd><code><a href="ObjectLoader.html" title="class in provided.util.loader.impl">ObjectLoader</a></code></dd>
</dl>
<hr>
<pre>public abstract class <span class="typeNameLabel">AObjectLoader&lt;ReturnT&gt;</span>
extends java.lang.Object
implements <a href="../IObjectLoader.html" title="interface in provided.util.loader">IObjectLoader</a>&lt;ReturnT&gt;</pre>
<div class="block">Factory that dynamically class loads and instantiates an object of type ReturnT</div>
<dl>
<dt><span class="simpleTagLabel">Author:</span></dt>
<dd>Stephen Wong</dd>
</dl>
</section>
<section class="summary">
<ul class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<li class="blockList">
<section class="fieldSummary"><a id="field.summary">
<!--   -->
</a>
<h2>Field Summary</h2>
<div class="memberSummary">
<table>
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<thead>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Field</th>
<th class="colLast" scope="col">Description</th>
</tr>
</thead>
<tbody>
<tr class="altColor">
<td class="colFirst"><code>private java.util.Map&lt;java.lang.Class&lt;?&gt;,&#8203;java.lang.Class&lt;?&gt;&gt;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#primitiveTypes">primitiveTypes</a></span></code></th>
<td class="colLast">
<div class="block">Maps the primitive  type class to the corresponding wrapper class, e.g.</div>
</td>
</tr>
</tbody>
</table>
</div>
</section>
</li>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<li class="blockList">
<section class="constructorSummary"><a id="constructor.summary">
<!--   -->
</a>
<h2>Constructor Summary</h2>
<div class="memberSummary">
<table>
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<thead>
<tr>
<th class="colFirst" scope="col">Constructor</th>
<th class="colLast" scope="col">Description</th>
</tr>
</thead>
<tbody>
<tr class="altColor">
<th class="colConstructorName" scope="row"><code><span class="memberNameLink"><a href="#%3Cinit%3E()">AObjectLoader</a></span>()</code></th>
<td class="colLast">
<div class="block">Constructor for the class.</div>
</td>
</tr>
</tbody>
</table>
</div>
</section>
</li>
<!-- ========== METHOD SUMMARY =========== -->
<li class="blockList">
<section class="methodSummary"><a id="method.summary">
<!--   -->
</a>
<h2>Method Summary</h2>
<div class="memberSummary">
<div role="tablist" aria-orientation="horizontal"><button role="tab" aria-selected="true" aria-controls="memberSummary_tabpanel" tabindex="0" onkeydown="switchTab(event)" id="t0" class="activeTableTab">All Methods</button><button role="tab" aria-selected="false" aria-controls="memberSummary_tabpanel" tabindex="-1" onkeydown="switchTab(event)" id="t2" class="tableTab" onclick="show(2);">Instance Methods</button><button role="tab" aria-selected="false" aria-controls="memberSummary_tabpanel" tabindex="-1" onkeydown="switchTab(event)" id="t3" class="tableTab" onclick="show(4);">Abstract Methods</button><button role="tab" aria-selected="false" aria-controls="memberSummary_tabpanel" tabindex="-1" onkeydown="switchTab(event)" id="t4" class="tableTab" onclick="show(8);">Concrete Methods</button></div>
<div id="memberSummary_tabpanel" role="tabpanel">
<table aria-labelledby="t0">
<thead>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Method</th>
<th class="colLast" scope="col">Description</th>
</tr>
</thead>
<tbody>
<tr class="altColor" id="i0">
<td class="colFirst"><code>private boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#checkTypes(java.lang.Class%5B%5D,java.lang.Object%5B%5D)">checkTypes</a></span>&#8203;(java.lang.Class&lt;?&gt;[]&nbsp;paramTypes,
java.lang.Object[]&nbsp;args)</code></th>
<td class="colLast">
<div class="block">Utility method to check if the types of the elements in the given args
 array match the types in the given paramTypes array.</div>
</td>
</tr>
<tr class="rowColor" id="i1">
<td class="colFirst"><code>protected abstract <a href="AObjectLoader.html" title="type parameter in AObjectLoader">ReturnT</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#errorHandler(java.lang.Exception,java.lang.String,java.lang.Object...)">errorHandler</a></span>&#8203;(java.lang.Exception&nbsp;ex,
java.lang.String&nbsp;className,
java.lang.Object...&nbsp;args)</code></th>
<td class="colLast">
<div class="block">Abstract loading exception handler method</div>
</td>
</tr>
<tr class="altColor" id="i2">
<td class="colFirst"><code>private java.lang.reflect.Constructor&lt;?&gt;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getConstructor(java.lang.Class,java.lang.Object%5B%5D)">getConstructor</a></span>&#8203;(java.lang.Class&lt;?&gt;&nbsp;aClass,
java.lang.Object[]&nbsp;args)</code></th>
<td class="colLast">
<div class="block">Proper form of Class.getConstructor(Class&lt;?&gt;[] parameterTypes) that
 returns a constructor that will return a constructor of the given class
 that will accept the given argument list.</div>
</td>
</tr>
<tr class="rowColor" id="i3">
<td class="colFirst"><code><a href="AObjectLoader.html" title="type parameter in AObjectLoader">ReturnT</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#loadInstance(java.lang.String,java.lang.Object...)">loadInstance</a></span>&#8203;(java.lang.String&nbsp;className,
java.lang.Object...&nbsp;args)</code></th>
<td class="colLast">
<div class="block">Uses dynamic class loading to load and instantiate a subclass or implementation of ReturnT given 
 a fully-qualified class name and an array (vararg) of input parameters.</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="inheritedList">
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<a id="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a><code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></div>
</section>
</li>
</ul>
</section>
<section class="details">
<ul class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<li class="blockList">
<section class="fieldDetails"><a id="field.detail">
<!--   -->
</a>
<h2>Field Details</h2>
<ul class="blockList">
<li class="blockList">
<section class="detail">
<h3><a id="primitiveTypes">primitiveTypes</a></h3>
<div class="memberSignature"><span class="modifiers">private</span>&nbsp;<span class="returnType">java.util.Map&lt;java.lang.Class&lt;?&gt;,&#8203;java.lang.Class&lt;?&gt;&gt;</span>&nbsp;<span class="memberName">primitiveTypes</span></div>
<div class="block">Maps the primitive  type class to the corresponding wrapper class, e.g.
 Integer.TYPE which is the class representation of "int", to
 Class&lt;Integer&gt;. This is needed when a primitive input parameter
 type is encountered.
 An anonymous inner class is used here so that the map can be loaded at instantiation time.</div>
</section>
</li>
</ul>
</section>
</li>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<li class="blockList">
<section class="constructorDetails"><a id="constructor.detail">
<!--   -->
</a>
<h2>Constructor Details</h2>
<ul class="blockList">
<li class="blockList">
<section class="detail">
<h3><a id="&lt;init&gt;()">AObjectLoader</a></h3>
<div class="memberSignature"><span class="modifiers">public</span>&nbsp;<span class="memberName">AObjectLoader</span>()</div>
<div class="block">Constructor for the class.   The given errorFac is used to generate instances when the loadInstance() method
 is otherwise unable to do so because of a processing error.</div>
</section>
</li>
</ul>
</section>
</li>
<!-- ============ METHOD DETAIL ========== -->
<li class="blockList">
<section class="methodDetails"><a id="method.detail">
<!--   -->
</a>
<h2>Method Details</h2>
<ul class="blockList">
<li class="blockList">
<section class="detail">
<h3><a id="loadInstance(java.lang.String,java.lang.Object...)">loadInstance</a></h3>
<div class="memberSignature"><span class="modifiers">public</span>&nbsp;<span class="returnType"><a href="AObjectLoader.html" title="type parameter in AObjectLoader">ReturnT</a></span>&nbsp;<span class="memberName">loadInstance</span>&#8203;(<span class="arguments">java.lang.String&nbsp;className,
java.lang.Object...&nbsp;args)</span></div>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../IObjectLoader.html#loadInstance(java.lang.String,java.lang.Object...)">IObjectLoader</a></code></span></div>
<div class="block">Uses dynamic class loading to load and instantiate a subclass or implementation of ReturnT given 
 a fully-qualified class name and an array (vararg) of input parameters.
 Note that primitive types get auto-boxed into regular classes, e.g. int becomes Integer.   
 Concrete implementations of this interface may have the ability to instantiate well-defined 
 return instances in the event that an error occurs during the loading process.
 The returned object is instantiated using the constructor of the class corresponding to the given classname 
 whose signature matches the number, order and types of the given constructor parameters.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../IObjectLoader.html#loadInstance(java.lang.String,java.lang.Object...)">loadInstance</a></code>&nbsp;in interface&nbsp;<code><a href="../IObjectLoader.html" title="interface in provided.util.loader">IObjectLoader</a>&lt;<a href="AObjectLoader.html" title="type parameter in AObjectLoader">ReturnT</a>&gt;</code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>className</code> - The fully-qualified name of the desired class which must be assignable to the ReturnT type.</dd>
<dd><code>args</code> - a varargs of input parameter values for the constructor of className</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>An instance of the desired class, as ReturnT</dd>
</dl>
</section>
</li>
<li class="blockList">
<section class="detail">
<h3><a id="errorHandler(java.lang.Exception,java.lang.String,java.lang.Object...)">errorHandler</a></h3>
<div class="memberSignature"><span class="modifiers">protected abstract</span>&nbsp;<span class="returnType"><a href="AObjectLoader.html" title="type parameter in AObjectLoader">ReturnT</a></span>&nbsp;<span class="memberName">errorHandler</span>&#8203;(<span class="arguments">java.lang.Exception&nbsp;ex,
java.lang.String&nbsp;className,
java.lang.Object...&nbsp;args)</span></div>
<div class="block">Abstract loading exception handler method</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>ex</code> - The Exception that was generated</dd>
<dd><code>className</code> - The fully qualified name of the class that was attempted to be loaded</dd>
<dd><code>args</code> - The constructor parameters for the given class name.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>An "error" object</dd>
</dl>
</section>
</li>
<li class="blockList">
<section class="detail">
<h3><a id="getConstructor(java.lang.Class,java.lang.Object[])">getConstructor</a></h3>
<div class="memberSignature"><span class="modifiers">private</span>&nbsp;<span class="returnType">java.lang.reflect.Constructor&lt;?&gt;</span>&nbsp;<span class="memberName">getConstructor</span>&#8203;(<span class="arguments">java.lang.Class&lt;?&gt;&nbsp;aClass,
java.lang.Object[]&nbsp;args)</span>
                                                 throws <span class="exceptions">java.lang.IllegalArgumentException</span></div>
<div class="block">Proper form of Class.getConstructor(Class&lt;?&gt;[] parameterTypes) that
 returns a constructor that will return a constructor of the given class
 that will accept the given argument list.  Correctly finds a constructor
 even if the constructor types are superclasses of the given arguments except 
 that it will not necessarily choose the more narrowed choice if more than one 
 possibility exists.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>aClass</code> - A class object whose constructor is being searched for.</dd>
<dd><code>args</code> - a list of input values for the constructor</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>a Constructor&lt;?&gt; that will work with the given set of input
         parameter values.</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.IllegalArgumentException</code> - when no constructor can be found that would accept the given
             parameters.</dd>
</dl>
</section>
</li>
<li class="blockList">
<section class="detail">
<h3><a id="checkTypes(java.lang.Class[],java.lang.Object[])">checkTypes</a></h3>
<div class="memberSignature"><span class="modifiers">private</span>&nbsp;<span class="returnType">boolean</span>&nbsp;<span class="memberName">checkTypes</span>&#8203;(<span class="arguments">java.lang.Class&lt;?&gt;[]&nbsp;paramTypes,
java.lang.Object[]&nbsp;args)</span></div>
<div class="block">Utility method to check if the types of the elements in the given args
 array match the types in the given paramTypes array. That is, if a method
 takes input parameters of types paramTypes, would args be an allowable
 input?</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>paramTypes</code> - An array of Class objects representing an ordered list of
            types</dd>
<dd><code>args</code> - An array of input parameter values, whose types are being
            checked against paramTypes.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if all arg elements are subclasses (assignable to) their
         corresponding paramTypes elements. Returns false otherwise.</dd>
</dl>
</section>
</li>
</ul>
</section>
</li>
</ul>
</section>
</div>
<!-- ========= END OF CLASS DATA ========= -->
</main>
<footer role="contentinfo">
<nav role="navigation">
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a id="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../module-summary.html">Module</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/AObjectLoader.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
</div>
<a id="skip.navbar.bottom">
<!--   -->
</a>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</nav>
</footer>
</div>
</div>
</body>
</html>
