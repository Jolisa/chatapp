package common;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.List;

import provided.rmiUtils.IRMI_Defs;

/**
 * An interface to create stubs of chat application users. You can 
 * use this interface to create stubs to be put on the discovery server.
 * Additionally, you can use this interface to create stubs of chat room
 * users to send messages.
 * @author Group C
 *
 */
public interface IChatAppConnector extends Remote  {
	
	/**
	 * The name the IChatAppConnector object will be bound to in the RMI Registry
	 */
	public static final String BOUND_NAME = "ChatAppConnector";

	/**
	 * The port that the client will use to communicate with the IChatAppUser object
	 */
	public static final int BOUND_PORT = IRMI_Defs.STUB_PORT_SERVER;
	
	/**
	 * Return the name of this user. In other words, return this user's unique user name.
	 * @return String representation of the name of this user
	 * @throws RemoteException remote exception
	 */
	public String getName() throws RemoteException;
	
	/**
	 * Invite a remote user to the room represented by modelStub.
	 * @param userStub the stub information of the local user who is sending an invite.
	 * The recipient of this invitation can use this stub to know who sent them an invite.
	 * @param roomStub a stub to a wrapper interface of a chat room connector
	 * @throws RemoteException remote exception
	 */
	public void invite(IChatAppConnector userStub, IChatRoomConnector roomStub) throws RemoteException;
	
	/**
	 * Request all of the rooms that a remote user is in.
	 * @param userStub the stub of the local user who is sending a request. 
	 * The recipient of this request can use this stub to know who sent them a request.
	 * @return a list of IChatRoomConnectors representing all of the rooms a remote user is in
	 * @throws RemoteException remote exception
	 */
	public List<IChatRoomConnector> request(IChatAppConnector userStub) throws RemoteException;

}
